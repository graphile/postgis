// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`prints a schema with this plugin 1`] = `
"\\"\\"\\"All input for the create \`GisDebug\` mutation.\\"\\"\\"
input CreateGisDebugInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`GisDebug\` to be created by this mutation.\\"\\"\\"
  gisDebug: GisDebugInput!
}

\\"\\"\\"The output of our create \`GisDebug\` mutation.\\"\\"\\"
type CreateGisDebugPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`GisDebug\` that was created by this mutation.\\"\\"\\"
  gisDebug: GisDebug

  \\"\\"\\"An edge for our \`GisDebug\`. May be used by Relay 1.\\"\\"\\"
  gisDebugEdge(
    \\"\\"\\"The method to use when ordering \`GisDebug\`.\\"\\"\\"
    orderBy: [GisDebugsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GisDebugsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

\\"\\"\\"A location in a connection that can be used for resuming pagination.\\"\\"\\"
scalar Cursor

\\"\\"\\"All input for the \`deleteGisDebugById\` mutation.\\"\\"\\"
input DeleteGisDebugByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String
  id: Int!
}

\\"\\"\\"All input for the \`deleteGisDebug\` mutation.\\"\\"\\"
input DeleteGisDebugInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`GisDebug\` to be deleted.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our delete \`GisDebug\` mutation.\\"\\"\\"
type DeleteGisDebugPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String
  deletedGisDebugId: ID

  \\"\\"\\"The \`GisDebug\` that was deleted by this mutation.\\"\\"\\"
  gisDebug: GisDebug

  \\"\\"\\"An edge for our \`GisDebug\`. May be used by Relay 1.\\"\\"\\"
  gisDebugEdge(
    \\"\\"\\"The method to use when ordering \`GisDebug\`.\\"\\"\\"
    orderBy: [GisDebugsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GisDebugsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}

type GeographyGeometryCollection implements GeographyInterface {
  geojson: GeoJSON
  geometries: [GeographyInterface]
}

type GeographyGeometryCollectionM implements GeographyInterface {
  geojson: GeoJSON
  geometries: [GeographyInterface]
}

type GeographyGeometryCollectionZ implements GeographyInterface {
  geojson: GeoJSON
  geometries: [GeographyInterface]
}

type GeographyGeometryCollectionZM implements GeographyInterface {
  geojson: GeoJSON
  geometries: [GeographyInterface]
}

\\"\\"\\"All geography types implement this interface\\"\\"\\"
interface GeographyInterface {
  \\"\\"\\"Converts the object to GeoJSON\\"\\"\\"
  geojson: GeoJSON
}

type GeographyLinestring implements GeographyInterface {
  geojson: GeoJSON
  points: [GeographyPoint]
}

type GeographyLinestringM implements GeographyInterface {
  geojson: GeoJSON
  points: [GeographyPointM]
}

type GeographyLinestringZ implements GeographyInterface {
  geojson: GeoJSON
  points: [GeographyPointZ]
}

type GeographyLinestringZM implements GeographyInterface {
  geojson: GeoJSON
  points: [GeographyPointZM]
}

type GeographyMultilinestring implements GeographyInterface {
  geojson: GeoJSON
  lines: [GeographyLinestring]
}

type GeographyMultilinestringM implements GeographyInterface {
  geojson: GeoJSON
  lines: [GeographyLinestringM]
}

type GeographyMultilinestringZ implements GeographyInterface {
  geojson: GeoJSON
  lines: [GeographyLinestringZ]
}

type GeographyMultilinestringZM implements GeographyInterface {
  geojson: GeoJSON
  lines: [GeographyLinestringZM]
}

type GeographyMultipoint implements GeographyInterface {
  geojson: GeoJSON
  points: [GeographyPoint]
}

type GeographyMultipointM implements GeographyInterface {
  geojson: GeoJSON
  points: [GeographyPointM]
}

type GeographyMultipointZ implements GeographyInterface {
  geojson: GeoJSON
  points: [GeographyPointZ]
}

type GeographyMultipointZM implements GeographyInterface {
  geojson: GeoJSON
  points: [GeographyPointZM]
}

type GeographyMultipolygon implements GeographyInterface {
  geojson: GeoJSON
  polygons: [GeographyPolygon]
}

type GeographyMultipolygonM implements GeographyInterface {
  geojson: GeoJSON
  polygons: [GeographyPolygonM]
}

type GeographyMultipolygonZ implements GeographyInterface {
  geojson: GeoJSON
  polygons: [GeographyPolygonZ]
}

type GeographyMultipolygonZM implements GeographyInterface {
  geojson: GeoJSON
  polygons: [GeographyPolygonZM]
}

type GeographyPoint implements GeographyInterface {
  geojson: GeoJSON
  latitude: Float!
  longitude: Float!
}

type GeographyPointM implements GeographyInterface {
  geojson: GeoJSON
  latitude: Float!
  longitude: Float!
}

type GeographyPointZ implements GeographyInterface {
  geojson: GeoJSON
  latitude: Float!
  longitude: Float!
}

type GeographyPointZM implements GeographyInterface {
  geojson: GeoJSON
  latitude: Float!
  longitude: Float!
}

type GeographyPolygon implements GeographyInterface {
  exterior: GeographyLinestring
  geojson: GeoJSON
  interiors: [GeographyLinestring]
}

type GeographyPolygonM implements GeographyInterface {
  exterior: GeographyLinestringM
  geojson: GeoJSON
  interiors: [GeographyLinestringM]
}

type GeographyPolygonZ implements GeographyInterface {
  exterior: GeographyLinestringZ
  geojson: GeoJSON
  interiors: [GeographyLinestringZ]
}

type GeographyPolygonZM implements GeographyInterface {
  exterior: GeographyLinestringZM
  geojson: GeoJSON
  interiors: [GeographyLinestringZM]
}

\\"\\"\\"
The \`GeoJSON\` scalar type represents GeoJSON values as specified by[RFC 7946](https://tools.ietf.org/html/rfc7946).
\\"\\"\\"
scalar GeoJSON

type GeometryGeometryCollection implements GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryInterface]
}

type GeometryGeometryCollectionM implements GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryInterface]
}

type GeometryGeometryCollectionZ implements GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryInterface]
}

type GeometryGeometryCollectionZM implements GeometryInterface {
  geojson: GeoJSON
  geometries: [GeometryInterface]
}

\\"\\"\\"All geometry types implement this interface\\"\\"\\"
interface GeometryInterface {
  \\"\\"\\"Converts the object to GeoJSON\\"\\"\\"
  geojson: GeoJSON
}

type GeometryLinestring implements GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPoint]
}

type GeometryLinestringM implements GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointM]
}

type GeometryLinestringZ implements GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZ]
}

type GeometryLinestringZM implements GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZM]
}

type GeometryMultilinestring implements GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLinestring]
}

type GeometryMultilinestringM implements GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLinestringM]
}

type GeometryMultilinestringZ implements GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLinestringZ]
}

type GeometryMultilinestringZM implements GeometryInterface {
  geojson: GeoJSON
  lines: [GeometryLinestringZM]
}

type GeometryMultipoint implements GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPoint]
}

type GeometryMultipointM implements GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointM]
}

type GeometryMultipointZ implements GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZ]
}

type GeometryMultipointZM implements GeometryInterface {
  geojson: GeoJSON
  points: [GeometryPointZM]
}

type GeometryMultipolygon implements GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygon]
}

type GeometryMultipolygonM implements GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygonM]
}

type GeometryMultipolygonZ implements GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygonZ]
}

type GeometryMultipolygonZM implements GeometryInterface {
  geojson: GeoJSON
  polygons: [GeometryPolygonZM]
}

type GeometryPoint implements GeometryInterface {
  geojson: GeoJSON
  x: Float!
  y: Float!
}

type GeometryPointM implements GeometryInterface {
  geojson: GeoJSON
  x: Float!
  y: Float!
}

type GeometryPointZ implements GeometryInterface {
  geojson: GeoJSON
  x: Float!
  y: Float!
}

type GeometryPointZM implements GeometryInterface {
  geojson: GeoJSON
  x: Float!
  y: Float!
}

type GeometryPolygon implements GeometryInterface {
  exterior: GeometryLinestring
  geojson: GeoJSON
  interiors: [GeometryLinestring]
}

type GeometryPolygonM implements GeometryInterface {
  exterior: GeometryLinestringM
  geojson: GeoJSON
  interiors: [GeometryLinestringM]
}

type GeometryPolygonZ implements GeometryInterface {
  exterior: GeometryLinestringZ
  geojson: GeoJSON
  interiors: [GeometryLinestringZ]
}

type GeometryPolygonZM implements GeometryInterface {
  exterior: GeometryLinestringZM
  geojson: GeoJSON
  interiors: [GeometryLinestringZM]
}

type GisDebug implements Node {
  geog: GeographyInterface
  geogGeometrycollection: GeographyGeometryCollection
  geogGeometrycollectionm: GeographyGeometryCollectionM
  geogGeometrycollectionz: GeographyGeometryCollectionZ
  geogGeometrycollectionzm: GeographyGeometryCollectionZM
  geogLinestring: GeographyLinestring
  geogLinestringm: GeographyLinestringM
  geogLinestringz: GeographyLinestringZ
  geogLinestringzm: GeographyLinestringZM
  geogMultilinestring: GeographyMultilinestring
  geogMultilinestringm: GeographyMultilinestringM
  geogMultilinestringz: GeographyMultilinestringZ
  geogMultilinestringzm: GeographyMultilinestringZM
  geogMultipoint: GeographyMultipoint
  geogMultipointm: GeographyMultipointM
  geogMultipointz: GeographyMultipointZ
  geogMultipointzm: GeographyMultipointZM
  geogMultipolygon: GeographyMultipolygon
  geogMultipolygonm: GeographyMultipolygonM
  geogMultipolygonz: GeographyMultipolygonZ
  geogMultipolygonzm: GeographyMultipolygonZM
  geogPoint: GeographyPoint
  geogPointm: GeographyPointM
  geogPointz: GeographyPointZ
  geogPointzm: GeographyPointZM
  geogPolygon: GeographyPolygon
  geogPolygonm: GeographyPolygonM
  geogPolygonz: GeographyPolygonZ
  geogPolygonzm: GeographyPolygonZM
  geom: GeometryInterface
  geomGeometrycollection: GeometryGeometryCollection
  geomGeometrycollectionm: GeometryGeometryCollectionM
  geomGeometrycollectionz: GeometryGeometryCollectionZ
  geomGeometrycollectionzm: GeometryGeometryCollectionZM
  geomLinestring: GeometryLinestring
  geomLinestringm: GeometryLinestringM
  geomLinestringz: GeometryLinestringZ
  geomLinestringzm: GeometryLinestringZM
  geomMultilinestring: GeometryMultilinestring
  geomMultilinestringm: GeometryMultilinestringM
  geomMultilinestringz: GeometryMultilinestringZ
  geomMultilinestringzm: GeometryMultilinestringZM
  geomMultipoint: GeometryMultipoint
  geomMultipointm: GeometryMultipointM
  geomMultipointz: GeometryMultipointZ
  geomMultipointzm: GeometryMultipointZM
  geomMultipolygon: GeometryMultipolygon
  geomMultipolygonm: GeometryMultipolygonM
  geomMultipolygonz: GeometryMultipolygonZ
  geomMultipolygonzm: GeometryMultipolygonZM
  geomPoint: GeometryPoint
  geomPointm: GeometryPointM
  geomPointz: GeometryPointZ
  geomPointzm: GeometryPointZM
  geomPolygon: GeometryPolygon
  geomPolygonm: GeometryPolygonM
  geomPolygonz: GeometryPolygonZ
  geomPolygonzm: GeometryPolygonZM
  id: Int!

  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"
A condition to be used against \`GisDebug\` object types. All fields are tested
for equality and combined with a logical ‘and.’
\\"\\"\\"
input GisDebugCondition {
  \\"\\"\\"Checks for equality with the object’s \`geog\` field.\\"\\"\\"
  geog: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogGeometrycollection\` field.\\"\\"\\"
  geogGeometrycollection: GeoJSON

  \\"\\"\\"
  Checks for equality with the object’s \`geogGeometrycollectionm\` field.
  \\"\\"\\"
  geogGeometrycollectionm: GeoJSON

  \\"\\"\\"
  Checks for equality with the object’s \`geogGeometrycollectionz\` field.
  \\"\\"\\"
  geogGeometrycollectionz: GeoJSON

  \\"\\"\\"
  Checks for equality with the object’s \`geogGeometrycollectionzm\` field.
  \\"\\"\\"
  geogGeometrycollectionzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogLinestring\` field.\\"\\"\\"
  geogLinestring: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogLinestringm\` field.\\"\\"\\"
  geogLinestringm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogLinestringz\` field.\\"\\"\\"
  geogLinestringz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogLinestringzm\` field.\\"\\"\\"
  geogLinestringzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultilinestring\` field.\\"\\"\\"
  geogMultilinestring: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultilinestringm\` field.\\"\\"\\"
  geogMultilinestringm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultilinestringz\` field.\\"\\"\\"
  geogMultilinestringz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultilinestringzm\` field.\\"\\"\\"
  geogMultilinestringzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultipoint\` field.\\"\\"\\"
  geogMultipoint: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultipointm\` field.\\"\\"\\"
  geogMultipointm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultipointz\` field.\\"\\"\\"
  geogMultipointz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultipointzm\` field.\\"\\"\\"
  geogMultipointzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultipolygon\` field.\\"\\"\\"
  geogMultipolygon: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultipolygonm\` field.\\"\\"\\"
  geogMultipolygonm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultipolygonz\` field.\\"\\"\\"
  geogMultipolygonz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogMultipolygonzm\` field.\\"\\"\\"
  geogMultipolygonzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogPoint\` field.\\"\\"\\"
  geogPoint: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogPointm\` field.\\"\\"\\"
  geogPointm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogPointz\` field.\\"\\"\\"
  geogPointz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogPointzm\` field.\\"\\"\\"
  geogPointzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogPolygon\` field.\\"\\"\\"
  geogPolygon: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogPolygonm\` field.\\"\\"\\"
  geogPolygonm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogPolygonz\` field.\\"\\"\\"
  geogPolygonz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geogPolygonzm\` field.\\"\\"\\"
  geogPolygonzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geom\` field.\\"\\"\\"
  geom: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomGeometrycollection\` field.\\"\\"\\"
  geomGeometrycollection: GeoJSON

  \\"\\"\\"
  Checks for equality with the object’s \`geomGeometrycollectionm\` field.
  \\"\\"\\"
  geomGeometrycollectionm: GeoJSON

  \\"\\"\\"
  Checks for equality with the object’s \`geomGeometrycollectionz\` field.
  \\"\\"\\"
  geomGeometrycollectionz: GeoJSON

  \\"\\"\\"
  Checks for equality with the object’s \`geomGeometrycollectionzm\` field.
  \\"\\"\\"
  geomGeometrycollectionzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomLinestring\` field.\\"\\"\\"
  geomLinestring: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomLinestringm\` field.\\"\\"\\"
  geomLinestringm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomLinestringz\` field.\\"\\"\\"
  geomLinestringz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomLinestringzm\` field.\\"\\"\\"
  geomLinestringzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultilinestring\` field.\\"\\"\\"
  geomMultilinestring: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultilinestringm\` field.\\"\\"\\"
  geomMultilinestringm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultilinestringz\` field.\\"\\"\\"
  geomMultilinestringz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultilinestringzm\` field.\\"\\"\\"
  geomMultilinestringzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultipoint\` field.\\"\\"\\"
  geomMultipoint: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultipointm\` field.\\"\\"\\"
  geomMultipointm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultipointz\` field.\\"\\"\\"
  geomMultipointz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultipointzm\` field.\\"\\"\\"
  geomMultipointzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultipolygon\` field.\\"\\"\\"
  geomMultipolygon: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultipolygonm\` field.\\"\\"\\"
  geomMultipolygonm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultipolygonz\` field.\\"\\"\\"
  geomMultipolygonz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomMultipolygonzm\` field.\\"\\"\\"
  geomMultipolygonzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomPoint\` field.\\"\\"\\"
  geomPoint: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomPointm\` field.\\"\\"\\"
  geomPointm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomPointz\` field.\\"\\"\\"
  geomPointz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomPointzm\` field.\\"\\"\\"
  geomPointzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomPolygon\` field.\\"\\"\\"
  geomPolygon: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomPolygonm\` field.\\"\\"\\"
  geomPolygonm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomPolygonz\` field.\\"\\"\\"
  geomPolygonz: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`geomPolygonzm\` field.\\"\\"\\"
  geomPolygonzm: GeoJSON

  \\"\\"\\"Checks for equality with the object’s \`id\` field.\\"\\"\\"
  id: Int
}

\\"\\"\\"An input for mutations affecting \`GisDebug\`\\"\\"\\"
input GisDebugInput {
  geog: GeoJSON
  geogGeometrycollection: GeoJSON
  geogGeometrycollectionm: GeoJSON
  geogGeometrycollectionz: GeoJSON
  geogGeometrycollectionzm: GeoJSON
  geogLinestring: GeoJSON
  geogLinestringm: GeoJSON
  geogLinestringz: GeoJSON
  geogLinestringzm: GeoJSON
  geogMultilinestring: GeoJSON
  geogMultilinestringm: GeoJSON
  geogMultilinestringz: GeoJSON
  geogMultilinestringzm: GeoJSON
  geogMultipoint: GeoJSON
  geogMultipointm: GeoJSON
  geogMultipointz: GeoJSON
  geogMultipointzm: GeoJSON
  geogMultipolygon: GeoJSON
  geogMultipolygonm: GeoJSON
  geogMultipolygonz: GeoJSON
  geogMultipolygonzm: GeoJSON
  geogPoint: GeoJSON
  geogPointm: GeoJSON
  geogPointz: GeoJSON
  geogPointzm: GeoJSON
  geogPolygon: GeoJSON
  geogPolygonm: GeoJSON
  geogPolygonz: GeoJSON
  geogPolygonzm: GeoJSON
  geom: GeoJSON
  geomGeometrycollection: GeoJSON
  geomGeometrycollectionm: GeoJSON
  geomGeometrycollectionz: GeoJSON
  geomGeometrycollectionzm: GeoJSON
  geomLinestring: GeoJSON
  geomLinestringm: GeoJSON
  geomLinestringz: GeoJSON
  geomLinestringzm: GeoJSON
  geomMultilinestring: GeoJSON
  geomMultilinestringm: GeoJSON
  geomMultilinestringz: GeoJSON
  geomMultilinestringzm: GeoJSON
  geomMultipoint: GeoJSON
  geomMultipointm: GeoJSON
  geomMultipointz: GeoJSON
  geomMultipointzm: GeoJSON
  geomMultipolygon: GeoJSON
  geomMultipolygonm: GeoJSON
  geomMultipolygonz: GeoJSON
  geomMultipolygonzm: GeoJSON
  geomPoint: GeoJSON
  geomPointm: GeoJSON
  geomPointz: GeoJSON
  geomPointzm: GeoJSON
  geomPolygon: GeoJSON
  geomPolygonm: GeoJSON
  geomPolygonz: GeoJSON
  geomPolygonzm: GeoJSON
  id: Int
}

\\"\\"\\"
Represents an update to a \`GisDebug\`. Fields that are set will be updated.
\\"\\"\\"
input GisDebugPatch {
  geog: GeoJSON
  geogGeometrycollection: GeoJSON
  geogGeometrycollectionm: GeoJSON
  geogGeometrycollectionz: GeoJSON
  geogGeometrycollectionzm: GeoJSON
  geogLinestring: GeoJSON
  geogLinestringm: GeoJSON
  geogLinestringz: GeoJSON
  geogLinestringzm: GeoJSON
  geogMultilinestring: GeoJSON
  geogMultilinestringm: GeoJSON
  geogMultilinestringz: GeoJSON
  geogMultilinestringzm: GeoJSON
  geogMultipoint: GeoJSON
  geogMultipointm: GeoJSON
  geogMultipointz: GeoJSON
  geogMultipointzm: GeoJSON
  geogMultipolygon: GeoJSON
  geogMultipolygonm: GeoJSON
  geogMultipolygonz: GeoJSON
  geogMultipolygonzm: GeoJSON
  geogPoint: GeoJSON
  geogPointm: GeoJSON
  geogPointz: GeoJSON
  geogPointzm: GeoJSON
  geogPolygon: GeoJSON
  geogPolygonm: GeoJSON
  geogPolygonz: GeoJSON
  geogPolygonzm: GeoJSON
  geom: GeoJSON
  geomGeometrycollection: GeoJSON
  geomGeometrycollectionm: GeoJSON
  geomGeometrycollectionz: GeoJSON
  geomGeometrycollectionzm: GeoJSON
  geomLinestring: GeoJSON
  geomLinestringm: GeoJSON
  geomLinestringz: GeoJSON
  geomLinestringzm: GeoJSON
  geomMultilinestring: GeoJSON
  geomMultilinestringm: GeoJSON
  geomMultilinestringz: GeoJSON
  geomMultilinestringzm: GeoJSON
  geomMultipoint: GeoJSON
  geomMultipointm: GeoJSON
  geomMultipointz: GeoJSON
  geomMultipointzm: GeoJSON
  geomMultipolygon: GeoJSON
  geomMultipolygonm: GeoJSON
  geomMultipolygonz: GeoJSON
  geomMultipolygonzm: GeoJSON
  geomPoint: GeoJSON
  geomPointm: GeoJSON
  geomPointz: GeoJSON
  geomPointzm: GeoJSON
  geomPolygon: GeoJSON
  geomPolygonm: GeoJSON
  geomPolygonz: GeoJSON
  geomPolygonzm: GeoJSON
  id: Int
}

\\"\\"\\"A connection to a list of \`GisDebug\` values.\\"\\"\\"
type GisDebugsConnection {
  \\"\\"\\"
  A list of edges which contains the \`GisDebug\` and cursor to aid in pagination.
  \\"\\"\\"
  edges: [GisDebugsEdge!]!

  \\"\\"\\"A list of \`GisDebug\` objects.\\"\\"\\"
  nodes: [GisDebug]!

  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"The count of *all* \`GisDebug\` you could get from the connection.\\"\\"\\"
  totalCount: Int!
}

\\"\\"\\"A \`GisDebug\` edge in the connection.\\"\\"\\"
type GisDebugsEdge {
  \\"\\"\\"A cursor for use in pagination.\\"\\"\\"
  cursor: Cursor

  \\"\\"\\"The \`GisDebug\` at the end of the edge.\\"\\"\\"
  node: GisDebug
}

\\"\\"\\"Methods to use when ordering \`GisDebug\`.\\"\\"\\"
enum GisDebugsOrderBy {
  GEOG_ASC
  GEOG_DESC
  GEOG_GEOMETRYCOLLECTION_ASC
  GEOG_GEOMETRYCOLLECTION_DESC
  GEOG_GEOMETRYCOLLECTIONM_ASC
  GEOG_GEOMETRYCOLLECTIONM_DESC
  GEOG_GEOMETRYCOLLECTIONZ_ASC
  GEOG_GEOMETRYCOLLECTIONZ_DESC
  GEOG_GEOMETRYCOLLECTIONZM_ASC
  GEOG_GEOMETRYCOLLECTIONZM_DESC
  GEOG_LINESTRING_ASC
  GEOG_LINESTRING_DESC
  GEOG_LINESTRINGM_ASC
  GEOG_LINESTRINGM_DESC
  GEOG_LINESTRINGZ_ASC
  GEOG_LINESTRINGZ_DESC
  GEOG_LINESTRINGZM_ASC
  GEOG_LINESTRINGZM_DESC
  GEOG_MULTILINESTRING_ASC
  GEOG_MULTILINESTRING_DESC
  GEOG_MULTILINESTRINGM_ASC
  GEOG_MULTILINESTRINGM_DESC
  GEOG_MULTILINESTRINGZ_ASC
  GEOG_MULTILINESTRINGZ_DESC
  GEOG_MULTILINESTRINGZM_ASC
  GEOG_MULTILINESTRINGZM_DESC
  GEOG_MULTIPOINT_ASC
  GEOG_MULTIPOINT_DESC
  GEOG_MULTIPOINTM_ASC
  GEOG_MULTIPOINTM_DESC
  GEOG_MULTIPOINTZ_ASC
  GEOG_MULTIPOINTZ_DESC
  GEOG_MULTIPOINTZM_ASC
  GEOG_MULTIPOINTZM_DESC
  GEOG_MULTIPOLYGON_ASC
  GEOG_MULTIPOLYGON_DESC
  GEOG_MULTIPOLYGONM_ASC
  GEOG_MULTIPOLYGONM_DESC
  GEOG_MULTIPOLYGONZ_ASC
  GEOG_MULTIPOLYGONZ_DESC
  GEOG_MULTIPOLYGONZM_ASC
  GEOG_MULTIPOLYGONZM_DESC
  GEOG_POINT_ASC
  GEOG_POINT_DESC
  GEOG_POINTM_ASC
  GEOG_POINTM_DESC
  GEOG_POINTZ_ASC
  GEOG_POINTZ_DESC
  GEOG_POINTZM_ASC
  GEOG_POINTZM_DESC
  GEOG_POLYGON_ASC
  GEOG_POLYGON_DESC
  GEOG_POLYGONM_ASC
  GEOG_POLYGONM_DESC
  GEOG_POLYGONZ_ASC
  GEOG_POLYGONZ_DESC
  GEOG_POLYGONZM_ASC
  GEOG_POLYGONZM_DESC
  GEOM_ASC
  GEOM_DESC
  GEOM_GEOMETRYCOLLECTION_ASC
  GEOM_GEOMETRYCOLLECTION_DESC
  GEOM_GEOMETRYCOLLECTIONM_ASC
  GEOM_GEOMETRYCOLLECTIONM_DESC
  GEOM_GEOMETRYCOLLECTIONZ_ASC
  GEOM_GEOMETRYCOLLECTIONZ_DESC
  GEOM_GEOMETRYCOLLECTIONZM_ASC
  GEOM_GEOMETRYCOLLECTIONZM_DESC
  GEOM_LINESTRING_ASC
  GEOM_LINESTRING_DESC
  GEOM_LINESTRINGM_ASC
  GEOM_LINESTRINGM_DESC
  GEOM_LINESTRINGZ_ASC
  GEOM_LINESTRINGZ_DESC
  GEOM_LINESTRINGZM_ASC
  GEOM_LINESTRINGZM_DESC
  GEOM_MULTILINESTRING_ASC
  GEOM_MULTILINESTRING_DESC
  GEOM_MULTILINESTRINGM_ASC
  GEOM_MULTILINESTRINGM_DESC
  GEOM_MULTILINESTRINGZ_ASC
  GEOM_MULTILINESTRINGZ_DESC
  GEOM_MULTILINESTRINGZM_ASC
  GEOM_MULTILINESTRINGZM_DESC
  GEOM_MULTIPOINT_ASC
  GEOM_MULTIPOINT_DESC
  GEOM_MULTIPOINTM_ASC
  GEOM_MULTIPOINTM_DESC
  GEOM_MULTIPOINTZ_ASC
  GEOM_MULTIPOINTZ_DESC
  GEOM_MULTIPOINTZM_ASC
  GEOM_MULTIPOINTZM_DESC
  GEOM_MULTIPOLYGON_ASC
  GEOM_MULTIPOLYGON_DESC
  GEOM_MULTIPOLYGONM_ASC
  GEOM_MULTIPOLYGONM_DESC
  GEOM_MULTIPOLYGONZ_ASC
  GEOM_MULTIPOLYGONZ_DESC
  GEOM_MULTIPOLYGONZM_ASC
  GEOM_MULTIPOLYGONZM_DESC
  GEOM_POINT_ASC
  GEOM_POINT_DESC
  GEOM_POINTM_ASC
  GEOM_POINTM_DESC
  GEOM_POINTZ_ASC
  GEOM_POINTZ_DESC
  GEOM_POINTZM_ASC
  GEOM_POINTZM_DESC
  GEOM_POLYGON_ASC
  GEOM_POLYGON_DESC
  GEOM_POLYGONM_ASC
  GEOM_POLYGONM_DESC
  GEOM_POLYGONZ_ASC
  GEOM_POLYGONZ_DESC
  GEOM_POLYGONZM_ASC
  GEOM_POLYGONZM_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

\\"\\"\\"
The root mutation type which contains root level fields which mutate data.
\\"\\"\\"
type Mutation {
  \\"\\"\\"Creates a single \`GisDebug\`.\\"\\"\\"
  createGisDebug(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: CreateGisDebugInput!
  ): CreateGisDebugPayload

  \\"\\"\\"Deletes a single \`GisDebug\` using its globally unique id.\\"\\"\\"
  deleteGisDebug(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteGisDebugInput!
  ): DeleteGisDebugPayload

  \\"\\"\\"Deletes a single \`GisDebug\` using a unique key.\\"\\"\\"
  deleteGisDebugById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: DeleteGisDebugByIdInput!
  ): DeleteGisDebugPayload

  \\"\\"\\"Updates a single \`GisDebug\` using its globally unique id and a patch.\\"\\"\\"
  updateGisDebug(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateGisDebugInput!
  ): UpdateGisDebugPayload

  \\"\\"\\"Updates a single \`GisDebug\` using a unique key and a patch.\\"\\"\\"
  updateGisDebugById(
    \\"\\"\\"
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    \\"\\"\\"
    input: UpdateGisDebugByIdInput!
  ): UpdateGisDebugPayload
}

\\"\\"\\"An object with a globally unique \`ID\`.\\"\\"\\"
interface Node {
  \\"\\"\\"
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: Cursor

  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: Cursor
}

\\"\\"\\"The root query type which gives access points into the data universe.\\"\\"\\"
type Query implements Node {
  \\"\\"\\"Reads and enables pagination through a set of \`GisDebug\`.\\"\\"\\"
  allGisDebugs(
    \\"\\"\\"Read all values in the set after (below) this cursor.\\"\\"\\"
    after: Cursor

    \\"\\"\\"Read all values in the set before (above) this cursor.\\"\\"\\"
    before: Cursor

    \\"\\"\\"
    A condition to be used in determining which values should be returned by the collection.
    \\"\\"\\"
    condition: GisDebugCondition

    \\"\\"\\"Only read the first \`n\` values of the set.\\"\\"\\"
    first: Int

    \\"\\"\\"Only read the last \`n\` values of the set.\\"\\"\\"
    last: Int

    \\"\\"\\"
    Skip the first \`n\` values from our \`after\` cursor, an alternative to cursor
    based pagination. May not be used with \`last\`.
    \\"\\"\\"
    offset: Int

    \\"\\"\\"The method to use when ordering \`GisDebug\`.\\"\\"\\"
    orderBy: [GisDebugsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GisDebugsConnection

  \\"\\"\\"Reads a single \`GisDebug\` using its globally unique \`ID\`.\\"\\"\\"
  gisDebug(
    \\"\\"\\"The globally unique \`ID\` to be used in selecting a single \`GisDebug\`.\\"\\"\\"
    nodeId: ID!
  ): GisDebug
  gisDebugById(id: Int!): GisDebug

  \\"\\"\\"Fetches an object given its globally unique \`ID\`.\\"\\"\\"
  node(
    \\"\\"\\"The globally unique \`ID\`.\\"\\"\\"
    nodeId: ID!
  ): Node

  \\"\\"\\"
  The root query type must be a \`Node\` to work well with Relay 1 mutations. This just resolves to \`query\`.
  \\"\\"\\"
  nodeId: ID!

  \\"\\"\\"
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  \\"\\"\\"
  query: Query!
}

\\"\\"\\"All input for the \`updateGisDebugById\` mutation.\\"\\"\\"
input UpdateGisDebugByIdInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`GisDebug\` being updated.
  \\"\\"\\"
  gisDebugPatch: GisDebugPatch!
  id: Int!
}

\\"\\"\\"All input for the \`updateGisDebug\` mutation.\\"\\"\\"
input UpdateGisDebugInput {
  \\"\\"\\"
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"
  An object where the defined keys will be set on the \`GisDebug\` being updated.
  \\"\\"\\"
  gisDebugPatch: GisDebugPatch!

  \\"\\"\\"
  The globally unique \`ID\` which will identify a single \`GisDebug\` to be updated.
  \\"\\"\\"
  nodeId: ID!
}

\\"\\"\\"The output of our update \`GisDebug\` mutation.\\"\\"\\"
type UpdateGisDebugPayload {
  \\"\\"\\"
  The exact same \`clientMutationId\` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  \\"\\"\\"
  clientMutationId: String

  \\"\\"\\"The \`GisDebug\` that was updated by this mutation.\\"\\"\\"
  gisDebug: GisDebug

  \\"\\"\\"An edge for our \`GisDebug\`. May be used by Relay 1.\\"\\"\\"
  gisDebugEdge(
    \\"\\"\\"The method to use when ordering \`GisDebug\`.\\"\\"\\"
    orderBy: [GisDebugsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GisDebugsEdge

  \\"\\"\\"
  Our root query field type. Allows us to run any query from our mutation payload.
  \\"\\"\\"
  query: Query
}
"
`;
